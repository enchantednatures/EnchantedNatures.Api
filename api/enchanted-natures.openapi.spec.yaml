---
openapi: 3.0.3
info:
  title: Enchanted Natures Api
  description: |
    Api backend for the Enchanted Natures Photography Website. 

    Photos can be uploaded to S3. Still a work in progress.
    Enchanted Natures Photography api backend for the https://enchantednatures.com website ............
  version: 0.2.0
  contact:
    name: Hunter Casten
    email: huntercasten@gmail.com
    url: https://github.com/enchantednatures
servers:
  - url: https://{environment}-api.enchantednatures.com/api/v0
    description: Enchanted Natures Api
    variables:
      environment:
        enum:
          - development
          - production
          - staging
        default: production
  - url: http://127.0.0.1:6969/api/v0
    description: localhost
paths:
  /health_check:
    servers:
      - url: /
    get:
      description: health of the service
      tags:
        - Health Checks
      operationId: health_check
      responses:
        "200":
          # TODO: refactor responses to do use the right enum value
          description: Check health
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"
        "500":
          description: Health invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthStatus"

  /categories:
    get:
      description: Get all categories
      operationId: get_categories
      tags:
        - Categories
      responses:
        "200":
          description: Returned all categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategorySummary"

    post:
      description: Create a new category
      operationId: create_category
      security:
        - authentik:
            - read_photos
            - write_photos
      tags:
        - Categories

      requestBody:
        description: Create category properties

        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string

      responses:
        "201":
          description: created
          headers:
            Location:
              description: The URL of the created Category
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDetails"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "408":
          description: timed out creating category
        "409":
          description: Category exists
        "400":
          description: Invalid model provided

  "/categories/{category_id}":
    parameters:
      - in: path
        name: category_id
        description: id of category
        required: true
        example: 1
        schema:
          type: integer
    get:
      description: Get a specific category by category_id
      operationId: get_category
      tags:
        - Categories

      responses:
        "200":
          description: successfully retrieved category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDetails"
        "404":
          $ref: '#/components/responses/NotFound'

    delete:
      description: Delete a specific category by category_id
      operationId: delete_category
      tags:
        - Categories
      security:
        - authentik: [ write_photos ]
      responses:
        "204":
          description: Deleted photo
        "404":
          description: Photo not found
  "/categories/{category_id}/photos":
    parameters:
      - in: path
        name: category_id
        description: id of category
        required: true
        example: 1
        schema:
          type: integer
    put: 
      description: Include a photo in the category 
      operationId: add_photo_to_category 
      tags:
        - Categories
        - Photos
      security:
        - authentik: [ write_photos ]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                photo_id:
                  type: integer
                display_order:
                  type: integer 
              required:  
                - photo_id
        
      responses:
        "200":
          description: successfully retrieved category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryDetails"
        "404":
          $ref: '#/components/responses/NotFound'
  /photos:
    get:
      description: Get all photos
      operationId: get_photos
      parameters:
        - in: query
          name: category_id
          description: id of category
          required: false
          example: 1
          schema:
            type: integer
      tags:
        - Photos
      responses:
        "200":
          description: Photos which match query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PhotoSummary"

    post:
      description: upload a file
      tags:
        - Upload
      operationId: save_request_body_2
      security:
        - authentik: [ upload_photos ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                location_taken:
                  type: string
                date_taken:
                  type: string
                  format: date-time
                  example: "2023-07-21T17:32:28Z"
                filename:
                  type: string
                  format: binary
            encoding:
              filename:
                contentType: image/png, image/jpeg
      responses:
        "201": 
          description: Photo Uploaded Successfully

  "/photos/{photo_id}":
    parameters:
      - in: path
        name: photo_id
        description: id of photo
        required: true
        example: 1
        schema:
          type: integer
    get:
      description: Get a specific photo by photo_id
      operationId: get_photo
      tags:
        - Photos
      responses:
        "200":
          description: Photo at photo_id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoDetails"
    delete:
      description: Delete a specific photo by photo_id
      operationId: delete_photo
      tags:
        - Photos
      security:
        - authentik: [ write_photos ]
      responses:
        "204":
          description: "Deleted"
        "404":
          $ref: "#/components/responses/NotFound"


components:
  examples: {} # TODO: add examples of each type
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  securitySchemes:
    authentik:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: /authorize
          tokenUrl: https://auth.enchantednatures.com/application/o/token/
          scopes:
            read_photos: read photos in your account
            write_photos: modify photos in your account
            upload_photos: upload photos in your account
  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    PhotoDetails:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        location_taken:
          type: string
        filename:
          type: string
        date_taken:
          type: string
          format: date
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      example:
        id: 1
        title: diptych
        location_taken: the narrows, ut
        filename: diptych.jpeg
        date_taken: 2019-12-12
        created_at: 2019-12-31T00:00:00Z
        updated_at: 2019-12-31T00:00:00Z

    PhotoSummary:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        location_taken:
          type: string
        filename:
          type: string
        date_taken: 
          type: string 
          format: date-time
        cloudflare_resource: 
          type: string

    CategorySummary:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
    HealthStatus:
      type: object
      properties:
        value:
          type: string
          enum:
            - ok
            - error
            - debug

    CategoryDetails:
      type: object
      required:
        - id
        - name
        - created_at
        - updated_at
      properties:
        created_at:
          type: string
          format: date-time
        id:
          type: integer
          format: int32
        name:
          type: string
        updated_at:
          type: string
          format: date-time
        photos:
          type: array
          items:
            "$ref": "#/components/schemas/PhotoSummary"
    # BadRequest:
    #   type: string
tags:
  - name: Health Checks
    description: Information about the health of the API
  - name: Categories
    description: Categories
  - name: Photos
    description: Photos
  - name: Upload
    description: Upload photos to storage for usage
